# DONE: move qecsim into src directory (see https://blog.ionelmc.ro/2014/05/25/python-packaging/#the-structure)
# DONE: switch to setup.cfg (see click github)
# DONE: copy across tests into tests directory and set up pytest
# DONE: set up tox (see https://tox.readthedocs.io/en/latest/index.html) for pytest
# DONE: set up tox for sphinx docs (see https://tox.readthedocs.io/en/latest/example/documentation.html and https://github.com/pallets/click/blob/7.x/tox.ini)
# DONE: copy across tools and models
# DONE: copy across core tests
# DONE: copy across model tests
# DONE: reformat all code
# DONE: validate with tests
# DONE: set up tox for docs/usage
# DONE: set up tox for docs/demos
# DONE: set up tox for notebook
# DONE: validate run demos using notebook
# DONE: validate plot demos using notebook
# DONE: add api docs models (compare model v. others)
# DONE: update overview docs for restricted models
# DONE: set up tox for test coverage
# DONE: set up tox for build
# DONE: create docs zip in dist
# DONE: document tox.ini
# DONE: fix test deprecation warning
# DONE: update docs for installation
# DONE: update docs for logging configuration
# DONE: add readme
# DONE: create qecsimext repo
# DONE: update doc to reference qecsimext
# DONE: update qecsimext tox.ini and setup.cfg relative to qecsim versions
# DONE: add project links to doc
# DONE: add license to doc
# DONE: add acknowledgements to doc
# DONE: doc qecsimext
# DONE: remove unused util.file_cache and tests for Windows compatibility
# DONE: rename QecsimException to QecsimError (including doc)
# DONE: sort cli entries for doc strings
# DONE: update qecsimext with latest qecsim and zip repo for download
# DONE: test qecsim and qecsimext on windows
# DONE: test qecsim and qecsimext on linux
# DONE: check tests on darwin, linux and windows
# DONE: create qecsim@gmail.com account
# DONE: set up issue tracker (update setup.cfg project_urls, README.rst and doc)
# DONE: upload doc to davidtuckett.com/qit/qecsim/
# DONE: share with preview developers
# DONE: update docs for C++ matching library
# DONE: test docs for C++ matching library
# DONE: port legacy refactorings: type equality
# DONE: port legacy refactorings: classmethod extensibility
# DONE: port legacy refactorings: dynamic type name in model exceptions
# DONE: port legacy refactorings: MPS decoder tensor network extensibility
# DONE: reformat all code
# DONE: set up tox for lint (flake8)
# DONE: refactoring: MPS decoders to use separate H and V node value methods for extensibility.
# DONE: document pandoc requirement in tox.ini
# DONE: tests: Mark performance tests to exclude in general testing.
# DONE: refactoring: Move distance methods from codes to decoders.
# DONE: refactoring: Move SMWPM decoder module functions to class methods.
# TODO: refactoring: Move CMWPM decoder utilities to class.
# TODO: refactoring: Remove ErrorModel.probability_distribution to allow non-IID noise.
# TODO: refactoring: Allow decoders to return DecodeResult object.
# TODO: docs: rename acknowledgment section to citing.
# TODO: docs: how to optimize CLI.
# TODO: README.rst: add citing section, remove copyright/add license, fix spacing.
# TODO: update author with initial: setup.cfg and docs/conf.py.
# TODO: add EQUS acknowledgment.
# TODO: choose licence (update LICENSE and setup.cfg license and classifiers).
# TODO: finalize setup.cfg meta-data.
# TODO: test upload to PyPI.
# TODO: create qecsimdev repo.
# TODO: host documentation on readthedocs (update setup.cfg project_urls, README.rst and doc).
# TODO: set up continuous integration.
